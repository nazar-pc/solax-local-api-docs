Following functions are used below to interpret some values correctly:
function read8BitUnsigned(n) {
  return n % 256;
}

function read16BitSigned(n) {
  if (n < 32768) {
    return n;
  } else {
    return n - 65536;
  }
}

function read32BitUnsigned(a, b) {
  return b + 65536 * a;
}

function read32BitSigned(a, b) {
  if (a < 32768) {
    return b + 65536 * a;
  } else {
    return b + 65536 * a - 4294967296;
  }
}

Data parsing depending on inverterType:
3: {
  Yield_Today: Data[13] / 10,
  Yield_Total: read32BitUnsigned(Data[11], Data[12]) / 10,
  PowerDc1: Data[7],
  PowerDc2: Data[8],
  BAT_Power: read16BitSigned(Data[18]),
  feedInPower: read32BitSigned(Data[48], Data[49]),
  GridAPower: read16BitSigned(Data[2]),
  FeedInEnergy: read32BitUnsigned(Data[50], Data[51]) / 100,
  ConsumeEnergy: read32BitUnsigned(Data[52], Data[53]) / 100,
  RunMode: Data[10],
  EPSAPower: read16BitSigned(Data[43]),
  Vdc1: Data[3] / 10,
  Vdc2: Data[4] / 10,
  Idc1: Data[5] / 10,
  Idc2: Data[6] / 10,
  EPSAVoltage: Data[44] / 10,
  EPSACurrent: read16BitSigned(Data[45]) / 10,
  BatteryCapacity: Data[20],
  BatteryVoltage: Data[16] / 100,
  BatteryTemperature: read16BitSigned(Data[19]),
  GridAVoltage: Data[0] / 10,
  GridACurrent: read16BitSigned(Data[1]) / 10,
  FreqacA: Data[9] / 100,
}
4,8: {
  Yield_Today: Data[13] / 10,
  Yield_Total: read32BitUnsigned(Data[11], Data[12]) / 10,
  PowerDc1: Data[7],
  PowerDc2: Data[8],
  feedInPower: read32BitSigned(Data[48], Data[49]),
  GridAPower: read16BitSigned(Data[2]),
  FeedInEnergy: read32BitUnsigned(Data[50], Data[51]) / 100,
  ConsumeEnergy: read32BitUnsigned(Data[52], Data[53]) / 100,
  RunMode: Data[10],
  Vdc1: Data[3] / 10,
  Vdc2: Data[4] / 10,
  Idc1: Data[5] / 10,
  Idc2: Data[6] / 10,
  GridAVoltage: Data[0] / 10,
  GridACurrent: read16BitSigned(Data[1]) / 10,
  FreqacA: Data[9] / 100,
}
5: {
  Yield_Today: Data[21] / 10,
  Yield_Total: read32BitUnsigned(Data[19], Data[20]) / 10,
  PowerDc1: Data[13],
  PowerDc2: Data[14],
  BAT_Power: read16BitSigned(Data[26]),
  feedInPower: read32BitSigned(Data[65], Data[66]),
  GridAPower: read16BitSigned(Data[6]),
  GridBPower: read16BitSigned(Data[7]),
  GridCPower: read16BitSigned(Data[8]),
  FeedInEnergy: read32BitUnsigned(Data[67], Data[68]) / 100,
  ConsumeEnergy: read32BitUnsigned(Data[69], Data[70]) / 100,
  RunMode: Data[18],
  EPSAPower: read16BitSigned(Data[60]),
  EPSBPower: read16BitSigned(Data[61]),
  EPSCPower: read16BitSigned(Data[62]),
  Vdc1: Data[9] / 10,
  Vdc2: Data[10] / 10,
  Idc1: Data[11] / 10,
  Idc2: Data[12] / 10,
  EPSAVoltage: Data[54] / 10,
  EPSBVoltage: Data[55] / 10,
  EPSCVoltage: Data[56] / 10,
  EPSACurrent: read16BitSigned(Data[57]) / 10,
  EPSBCurrent: read16BitSigned(Data[58]) / 10,
  EPSCCurrent: read16BitSigned(Data[59]) / 10,
  BatteryCapacity: Data[28],
  BatteryVoltage: Data[24] / 100,
  BatteryTemperature: read16BitSigned(Data[27]),
  GridAVoltage: Data[0] / 10,
  GridBVoltage: Data[1] / 10,
  GridCVoltage: Data[2] / 10,
  GridACurrent: read16BitSigned(Data[3]) / 10,
  GridBCurrent: read16BitSigned(Data[4]) / 10,
  GridCCurrent: read16BitSigned(Data[5]) / 10,
  FreqacA: Data[15] / 100,
  FreqacB: Data[16] / 100,
  FreqacC: Data[17] / 100,
}
6: {
  Yield_Today: Data[21] / 10,
  Yield_Total: read32BitUnsigned(Data[19], Data[20]) / 10,
  PowerDc1: Data[13],
  PowerDc2: Data[14],
  feedInPower: read32BitSigned(Data[73], Data[74]),
  GridAPower: read16BitSigned(Data[6]),
  GridBPower: read16BitSigned(Data[7]),
  GridCPower: read16BitSigned(Data[8]),
  FeedInEnergy: read32BitUnsigned(Data[75], Data[76]) / 100,
  ConsumeEnergy: read32BitUnsigned(Data[77], Data[78]) / 100,
  RunMode: Data[18],
  Vdc1: Data[9] / 10,
  Vdc2: Data[10] / 10,
  Idc1: Data[11] / 10,
  Idc2: Data[12] / 10,
  GridAVoltage: Data[0] / 10,
  GridBVoltage: Data[1] / 10,
  GridCVoltage: Data[2] / 10,
  GridACurrent: read16BitSigned(Data[3]) / 10,
  GridBCurrent: read16BitSigned(Data[4]) / 10,
  GridCCurrent: read16BitSigned(Data[5]) / 10,
  FreqacA: Data[15] / 100,
  FreqacB: Data[16] / 100,
  FreqacC: Data[17] / 100,
}
7: {
  Yield_Today: Data[21] / 10,
  Yield_Total: read32BitUnsigned(Data[19], Data[20]) / 10,
  PowerDc1: Data[13],
  PowerDc2: Data[14],
  feedInPower: read32BitSigned(Data[74], Data[75]),
  GridAPower: read16BitSigned(Data[6]),
  GridBPower: read16BitSigned(Data[7]),
  GridCPower: read16BitSigned(Data[8]),
  FeedInEnergy: read32BitUnsigned(Data[76], Data[77]) / 100,
  ConsumeEnergy: read32BitUnsigned(Data[78], Data[79]) / 100,
  RunMode: Data[18],
  Vdc1: Data[9] / 10,
  Vdc2: Data[10] / 10,
  Idc1: Data[11] / 10,
  Idc2: Data[12] / 10,
  GridAVoltage: Data[0] / 10,
  GridBVoltage: Data[1] / 10,
  GridCVoltage: Data[2] / 10,
  GridACurrent: read16BitSigned(Data[3]) / 10,
  GridBCurrent: read16BitSigned(Data[4]) / 10,
  GridCCurrent: read16BitSigned(Data[5]) / 10,
  FreqacA: Data[15] / 100,
  FreqacB: Data[16] / 100,
  FreqacC: Data[17] / 100,
}
9: {
  Yield_Today: Data[13] / 10,
  Yield_Total: read32BitUnsigned(Data[11], Data[12]) / 10,
  BAT_Power: read16BitSigned(Data[16]),
  feedInPower: read32BitSigned(Data[44], Data[45]),
  GridAPower: read16BitSigned(Data[2]),
  FeedInEnergy: read32BitUnsigned(Data[46], Data[47]) / 100,
  ConsumeEnergy: read32BitUnsigned(Data[48], Data[49]) / 100,
  RunMode: Data[10],
  BatteryCapacity: Data[18],
  BatteryVoltage: Data[14] / 100,
  BatteryTemperature: read16BitSigned(Data[17]),
  GridAVoltage: Data[0] / 10,
  GridACurrent: read16BitSigned(Data[1]) / 10,
  FreqacA: Data[9] / 100,
}
10..12: {
  Yield_Today: Data[13] / 10,
  Yield_Total: read32BitUnsigned(Data[11], Data[12]) / 10,
  PowerDc1: Data[7],
  PowerDc2: Data[8],
  PowerDc3: Data[126],
  PowerDc4: Data[127],
  BAT_Power: read16BitSigned(Data[18]),
  feedInPower: read32BitSigned(Data[48], Data[49]),
  GridAPower: read16BitSigned(Data[2]),
  FeedInEnergy: read32BitUnsigned(Data[50], Data[51]) / 10,
  ConsumeEnergy: read32BitUnsigned(Data[52], Data[53]) / 10,
  RunMode: Data[10],
  EPSAPower: read16BitSigned(Data[43]),
  Vdc1: Data[3] / 10,
  Vdc2: Data[4] / 10,
  Vdc3: Data[122] / 10,
  Vdc4: Data[123] / 10,
  Idc1: Data[5] / 10,
  Idc2: Data[6] / 10,
  Idc3: Data[124] / 10,
  Idc4: Data[125] / 10,
  EPSAVoltage: Data[44] / 10,
  EPSACurrent: read16BitSigned(Data[45]) / 10,
  BatteryCapacity: Data[20],
  BatteryVoltage: Data[16] / 100,
  BatteryTemperature: read16BitSigned(Data[19]),
  GridAVoltage: Data[0] / 10,
  GridACurrent: read16BitSigned(Data[1]) / 10,
  FreqacA: Data[9] / 100,
}
13,17: {
  Yield_Today: Data[36] / 10,
  Yield_Total: read32BitUnsigned(Data[34], Data[35]) / 10,
  PowerDc1: Data[10],
  PowerDc2: Data[13],
  PowerDc3: Data[16],
  BAT_Power: read16BitSigned(Data[105]),
  feedInPower: read16BitSigned(Data[29]),
  GridAPower: read16BitSigned(Data[2]),
  GridBPower: read16BitSigned(Data[5]),
  FeedInEnergy: read32BitUnsigned(Data[52], Data[53]) / 100,
  ConsumeEnergy: read32BitUnsigned(Data[54], Data[55]) / 100,
  RunMode: Data[17],
  EPSAPower: read16BitSigned(Data[21]),
  EPSBPower: read16BitSigned(Data[25]),
  Vdc1: Data[8] / 10,
  Vdc2: Data[11] / 10,
  Vdc3: Data[14] / 10,
  Idc1: Data[9] / 10,
  Idc2: Data[12] / 10,
  Idc3: Data[15] / 10,
  EPSAVoltage: Data[19] / 10,
  EPSBVoltage: Data[23] / 10,
  EPSACurrent: read16BitSigned(Data[20]) / 10,
  EPSBCurrent: read16BitSigned(Data[24]) / 10,
  BatteryCapacity: Data[80],
  BatteryVoltage: read16BitSigned(Data[106]) / 10,
  BatteryTemperature: read16BitSigned(Data[82]),
  GridAVoltage: Data[0] / 10,
  GridBVoltage: Data[3] / 10,
  GridACurrent: read16BitSigned(Data[1]) / 10,
  GridBCurrent: read16BitSigned(Data[4]) / 10,
  FreqacA: Data[7] / 100,
}
14: {
  Yield_Today: Data[70] / 10,
  Yield_Total: read32BitUnsigned(Data[68], Data[69]) / 10,
  PowerDc1: Data[14],
  PowerDc2: Data[15],
  BAT_Power: read16BitSigned(Data[41]),
  feedInPower: read32BitSigned(Data[34], Data[35]),
  GridAPower: read16BitSigned(Data[6]),
  GridBPower: read16BitSigned(Data[7]),
  GridCPower: read16BitSigned(Data[8]),
  FeedInEnergy: read32BitUnsigned(Data[86], Data[87]) / 100,
  ConsumeEnergy: read32BitUnsigned(Data[88], Data[89]) / 100,
  RunMode: Data[19],
  EPSAPower: read16BitSigned(Data[29]),
  EPSBPower: read16BitSigned(Data[30]),
  EPSCPower: read16BitSigned(Data[31]),
  Vdc1: Data[10] / 10,
  Vdc2: Data[11] / 10,
  Idc1: Data[12] / 10,
  Idc2: Data[13] / 10,
  EPSAVoltage: Data[23] / 10,
  EPSBVoltage: Data[24] / 10,
  EPSCVoltage: Data[25] / 10,
  EPSACurrent: read16BitSigned(Data[26]) / 10,
  EPSBCurrent: read16BitSigned(Data[27]) / 10,
  EPSCCurrent: read16BitSigned(Data[28]) / 10,
  BatteryCapacity: Data[103],
  BatteryVoltage: read32BitUnsigned(Data[169], Data[170]) / 100,
  BatteryTemperature: read16BitSigned(Data[105]),
  GridAVoltage: Data[0] / 10,
  GridBVoltage: Data[1] / 10,
  GridCVoltage: Data[2] / 10,
  GridACurrent: read16BitSigned(Data[3]) / 10,
  GridBCurrent: read16BitSigned(Data[4]) / 10,
  GridCCurrent: read16BitSigned(Data[5]) / 10,
  FreqacA: Data[16] / 100,
  FreqacB: Data[17] / 100,
  FreqacC: Data[18] / 100,
}
15,23: {
  Yield_Today: Data[13] / 10,
  Yield_Total: read32BitUnsigned(Data[11], Data[12]) / 10,
  PowerDc1: Data[8],
  PowerDc2: Data[9],
  BAT_Power: read16BitSigned(Data[16]),
  feedInPower: read32BitSigned(Data[32], Data[33]),
  GridAPower: read16BitSigned(Data[2]),
  FeedInEnergy: read32BitUnsigned(Data[34], Data[35]) / 100,
  ConsumeEnergy: read32BitUnsigned(Data[36], Data[37]) / 100,
  RunMode: Data[10],
  EPSAPower: read16BitSigned(Data[28]),
  Vdc1: Data[4] / 10,
  Vdc2: Data[5] / 10,
  Idc1: Data[6] / 10,
  Idc2: Data[7] / 10,
  EPSAVoltage: Data[29] / 10,
  EPSACurrent: read16BitSigned(Data[30]) / 10,
  BatteryCapacity: Data[18],
  BatteryVoltage: Data[14] / 100,
  BatteryTemperature: read16BitSigned(Data[17]),
  GridAVoltage: Data[0] / 10,
  GridACurrent: read16BitSigned(Data[1]) / 10,
  FreqacA: Data[3] / 100,
}
16: {
  Yield_Today: Data[24] / 10,
  Yield_Total: read32BitUnsigned(Data[22], Data[23]) / 10,
  PowerDc1: Data[15],
  PowerDc2: Data[16],
  PowerDc3: Data[17],
  feedInPower: read32BitSigned(Data[72], Data[73]),
  GridAPower: read16BitSigned(Data[6]),
  GridBPower: read16BitSigned(Data[7]),
  GridCPower: read16BitSigned(Data[8]),
  FeedInEnergy: read32BitUnsigned(Data[74], Data[75]) / 100,
  ConsumeEnergy: read32BitUnsigned(Data[76], Data[77]) / 100,
  RunMode: Data[21],
  Vdc1: Data[9] / 10,
  Vdc2: Data[10] / 10,
  Vdc3: Data[11] / 10,
  Idc1: Data[12] / 10,
  Idc2: Data[13] / 10,
  Idc3: Data[14] / 10,
  GridAVoltage: Data[0] / 10,
  GridBVoltage: Data[1] / 10,
  GridCVoltage: Data[2] / 10,
  GridACurrent: read16BitSigned(Data[3]) / 10,
  GridBCurrent: read16BitSigned(Data[4]) / 10,
  GridCCurrent: read16BitSigned(Data[5]) / 10,
  FreqacA: Data[18] / 100,
  FreqacB: Data[19] / 100,
  FreqacC: Data[20] / 100,
}
18,22: {
  Yield_Today: Data[21] / 10,
  Yield_Total: read32BitUnsigned(Data[19], Data[20]) / 10,
  PowerDc1: Data[13],
  PowerDc2: Data[14],
  feedInPower: read32BitSigned(Data[72], Data[73]),
  GridAPower: read16BitSigned(Data[3]),
  FeedInEnergy: read32BitUnsigned(Data[74], Data[75]) / 100,
  ConsumeEnergy: read32BitUnsigned(Data[76], Data[77]) / 100,
  RunMode: Data[10],
  Vdc1: Data[4] / 10,
  Vdc2: Data[5] / 10,
  Idc1: Data[8] / 10,
  Idc2: Data[9] / 10,
  GridAVoltage: Data[0] / 10,
  GridACurrent: read16BitSigned(Data[1]) / 10,
  FreqacA: Data[2] / 100,
}
19,20,21: {
  Yield_Today: Data[43] / 10,
  Yield_Total: read32BitUnsigned(Data[41], Data[42]) / 10,
  PowerDc1: Data[19],
  PowerDc2: Data[20],
  PowerDc3: Data[21],
  BAT_Power: read16BitSigned(Data[91]),
  feedInPower: read32BitSigned(Data[28], Data[29]),
  GridAPower: read16BitSigned(Data[6]),
  FeedInEnergy: read32BitUnsigned(Data[33], Data[34]) / 10,
  ConsumeEnergy: read32BitUnsigned(Data[35], Data[36]) / 10,
  RunMode: read8BitUnsigned(Data[10]),
  EPSAPower: read16BitSigned(Data[27]),
  Vdc1: Data[11] / 10,
  Vdc2: Data[12] / 10,
  Vdc3: Data[13] / 10,
  Idc1: Data[15] / 10,
  Idc2: Data[16] / 10,
  Idc3: Data[17] / 10,
  EPSAVoltage: Data[24] / 10,
  EPSACurrent: read16BitSigned(Data[25]) / 10,
  BatteryCapacity: Data[93],
  BatteryVoltage: Data[89] / 100,
  BatteryTemperature: read16BitSigned(Data[92]),
  GridAVoltage: Data[4] / 10,
  GridACurrent: read16BitSigned(Data[5]) / 10,
  FreqacA: Data[7] / 100,
  ParallelStatus: Data[80],
  SlaverNum: Data[81],
  ParallelOnlineStatus: Data[82],
}
24: {
  Yield_Today: Data[70] / 10,
  Yield_Total: read32BitUnsigned(Data[71], Data[72]) / 10,
  PowerDc1: Data[14],
  PowerDc2: Data[15],
  BAT_Power: read16BitSigned(Data[41]),
  feedInPower: read32BitSigned(Data[34], Data[35]),
  GridAPower: read16BitSigned(Data[6]),
  GridBPower: read16BitSigned(Data[7]),
  GridCPower: read16BitSigned(Data[8]),
  FeedInEnergy: read32BitUnsigned(Data[86], Data[87]) / 100,
  ConsumeEnergy: read32BitUnsigned(Data[88], Data[89]) / 100,
  RunMode: Data[19],
  EPSAPower: read16BitSigned(Data[29]),
  EPSBPower: read16BitSigned(Data[30]),
  EPSCPower: read16BitSigned(Data[31]),
  Vdc1: Data[10] / 10,
  Vdc2: Data[11] / 10,
  Idc1: Data[12] / 10,
  Idc2: Data[13] / 10,
  EPSAVoltage: Data[23] / 10,
  EPSBVoltage: Data[24] / 10,
  EPSCVoltage: Data[25] / 10,
  EPSACurrent: read16BitSigned(Data[26]) / 10,
  EPSBCurrent: read16BitSigned(Data[27]) / 10,
  EPSCCurrent: read16BitSigned(Data[28]) / 10,
  BatteryCapacity: Data[103],
  BatteryVoltage: Data[39] / 100,
  BatteryTemperature: read16BitSigned(Data[105]),
  GridAVoltage: Data[0] / 10,
  GridBVoltage: Data[1] / 10,
  GridCVoltage: Data[2] / 10,
  GridACurrent: read16BitSigned(Data[3]) / 10,
  GridBCurrent: read16BitSigned(Data[4]) / 10,
  GridCCurrent: read16BitSigned(Data[5]) / 10,
  FreqacA: Data[16] / 100,
  FreqacB: Data[17] / 100,
  FreqacC: Data[18] / 100,
}
100,101: {
  Yield_Today: read16BitSigned(Data[48]) / 10,
  Yield_Total: read32BitSigned(Data[46], Data[47]) / 10,
  GridAPower: read32BitSigned(Data[33], Data[34]),
  GridBPower: read32BitSigned(Data[35], Data[36]),
  GridCPower: read32BitSigned(Data[37], Data[38]),
  RunMode: Data[56],
  Vdc1: read16BitSigned(Data[87]) / 10,
  Vdc2: read16BitSigned(Data[89]) / 10,
  Vdc3: read16BitSigned(Data[91]) / 10,
  Vdc4: read16BitSigned(Data[93]) / 10,
  Vdc5: read16BitSigned(Data[95]) / 10,
  Vdc6: read16BitSigned(Data[97]) / 10,
  Vdc7: read16BitSigned(Data[99]) / 10,
  Vdc8: read16BitSigned(Data[101]) / 10,
  Vdc9: read16BitSigned(Data[103]) / 10,
  Vdc10: read16BitSigned(Data[105]) / 10,
  Vdc11: read16BitSigned(Data[107]) / 10,
  Vdc12: read16BitSigned(Data[109]) / 10,
  Idc1: read16BitSigned(Data[88]) / 10,
  Idc2: read16BitSigned(Data[90]) / 10,
  Idc3: read16BitSigned(Data[92]) / 10,
  Idc4: read16BitSigned(Data[94]) / 10,
  Idc5: read16BitSigned(Data[96]) / 10,
  Idc6: read16BitSigned(Data[98]) / 10,
  Idc7: read16BitSigned(Data[100]) / 10,
  Idc8: read16BitSigned(Data[102]) / 10,
  Idc9: read16BitSigned(Data[104]) / 10,
  Idc10: read16BitSigned(Data[106]) / 10,
  Idc11: read16BitSigned(Data[108]) / 10,
  Idc12: read16BitSigned(Data[110]) / 10,
  CurrBranch1: Data[137] / 10,
  CurrBranch2: Data[138] / 10,
  CurrBranch3: Data[139] / 10,
  CurrBranch4: Data[140] / 10,
  CurrBranch5: Data[141] / 10,
  CurrBranch6: Data[142] / 10,
  CurrBranch7: Data[143] / 10,
  CurrBranch8: Data[144] / 10,
  CurrBranch9: Data[145] / 10,
  CurrBranch10: Data[146] / 10,
  CurrBranch11: Data[147] / 10,
  CurrBranch12: Data[148] / 10,
  CurrBranch13: Data[149] / 10,
  CurrBranch14: Data[150] / 10,
  CurrBranch15: Data[151] / 10,
  CurrBranch16: Data[152] / 10,
  CurrBranch17: Data[153] / 10,
  CurrBranch18: Data[154] / 10,
  CurrBranch19: Data[155] / 10,
  CurrBranch20: Data[156] / 10,
  CurrBranch21: Data[157] / 10,
  CurrBranch22: Data[158] / 10,
  CurrBranch23: Data[159] / 10,
  CurrBranch24: Data[160] / 10,
  GridAVoltage: Data[27] / 10,
  GridBVoltage: Data[28] / 10,
  GridCVoltage: Data[29] / 10,
  GridACurrent: read16BitSigned(Data[30]) / 10,
  GridBCurrent: read16BitSigned(Data[31]) / 10,
  GridCCurrent: read16BitSigned(Data[32]) / 10,
  FreqacA: Data[39] / 100,
  derateState: Data[55],
}
102: {
  Yield_Today: Data[18] / 10,
  Yield_Total: read32BitUnsigned(Data[14], Data[15]) / 10,
  PowerDc1: Data[9],
  PowerDc2: Data[10],
  BAT_Power: read16BitSigned(Data[22]),
  feedInPower: read32BitSigned(Data[29], Data[30]),
  GridAPower: read16BitSigned(Data[2]),
  FeedInEnergy: read32BitUnsigned(Data[31], Data[32]) / 100,
  ConsumeEnergy: read32BitUnsigned(Data[33], Data[34]) / 100,
  RunMode: Data[12],
  EPSAPower: read16BitSigned(Data[43]),
  Vdc1: Data[5] / 10,
  Vdc2: Data[7] / 10,
  Idc1: Data[6] / 10,
  Idc2: Data[8] / 10,
  EPSAVoltage: Data[41] / 10,
  EPSACurrent: read16BitSigned(Data[42]) / 10,
  BatteryCapacity: Data[18],
  BatteryVoltage: Data[20] / 10,
  BatteryTemperature: read16BitSigned(Data[17]),
  GridAVoltage: Data[0] / 10,
  GridACurrent: read16BitSigned(Data[1]) / 10,
  FreqacA: Data[3] / 100,
}

masterSn is theoretically possible to read, but in practice it didn't return correct values in X1 Hybrid G1 that I own
and app doesn't display it with local connection either 🤷.
